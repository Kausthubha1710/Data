import os
import re
from datetime import datetime

def load_config(config_file):
    config = {}
    if not os.path.exists(config_file):
        raise FileNotFoundError(f"Config file not found: {config_file}")
    
    with open(config_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and '=' in line:
                key, value = line.split('=', 1)
                config[key.strip()] = value.strip()
    return config

def get_all_drives():
    drives = []
    for drive in range(ord('A'), ord('Z') + 1):
        drive_letter = chr(drive) + ":\\"
        if os.path.exists(drive_letter):
            drives.append(drive_letter)
    return drives

def read_input_paths(input_file):
    if not input_file or not os.path.exists(input_file):
        print("INPUT_FILE not found or not defined, using common user directories.")
        return get_all_drives()
    
    with open(input_file, 'r', encoding='utf-8') as f:
        paths = [line.strip() for line in f if line.strip() and os.path.exists(line.strip())]
        return paths if paths else get_all_drives()

def get_creation_time(path):
    try:
        return os.path.getctime(path)
    except Exception:
        return None

def compile_patterns(pattern_str):
    patterns = [p.strip() for p in pattern_str.split(',') if p.strip()]
    return [re.compile(p) for p in patterns]

def scan_and_generate(config):
    input_file = config.get('INPUT_FILE')
    output_dir = config.get('OUTPUT_DIR')
    expected_arrival_time = config.get('EXPECTED_ARRIVAL_TIME', '')
    pattern_str = config.get('FILENAME_PATTERNS')
    
    if not pattern_str:
        raise ValueError("FILENAME_PATTERNS must be defined in config.txt")
    
    compiled_patterns = compile_patterns(pattern_str)
    
    if not output_dir or not os.path.isdir(output_dir):
        print("OUTPUT_DIR not defined or invalid in config.txt. Using Downloads folder as fallback.")
        current_user = os.getlogin()
        output_dir = os.path.join("C:\\Users", current_user, "Downloads")
    
    output_txt = os.path.join(output_dir, "ppredefinedfiles.txt")
    os.makedirs(output_dir, exist_ok=True)
    
    directories = read_input_paths(input_file)
    
    # Load existing entries - use filename as primary key for tracking
    existing_files = {}  # filename -> [filename, actual_time, path, expected_time]
    
    if os.path.exists(output_txt):
        with open(output_txt, 'r', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split('\t')
                if len(parts) >= 4:
                    filename = parts[0]
                    existing_files[filename] = parts
    
    print(f"Loaded {len(existing_files)} existing file records")
    
    # Find current matching files
    current_files = {}  # filename -> [filename, actual_time, path, expected_time]
    
    for root_dir in directories:
        if not os.path.exists(root_dir):
            continue
            
        for dirpath, _, filenames in os.walk(root_dir):
            if "summaries" in dirpath.lower():
                continue  # Skip the "summaries" folder
            
            for filename in filenames:
                if any(p.match(filename) for p in compiled_patterns):
                    full_path = os.path.join(dirpath, filename)
                    
                    # Skip if we've already found this filename (avoid duplicates)
                    if filename in current_files:
                        continue
                    
                    ctime = get_creation_time(full_path)
                    if ctime:
                        actual_dt = datetime.fromtimestamp(ctime)
                        actual_time = actual_dt.strftime("%Y-%m-%d %H:%M:%S")
                        
                        # Combine the current date with the fixed time from the config
                        current_date = datetime.now().strftime("%Y-%m-%d")
                        expected_time = f"{current_date} {expected_arrival_time}"
                        
                        current_files[filename] = [filename, actual_time, full_path, expected_time]
    
    print(f"Found {len(current_files)} current matching files")
    
    # Build final entries
    all_filenames = set(existing_files.keys()).union(set(current_files.keys()))
    final_entries = []
    
    current_date = datetime.now().strftime("%Y-%m-%d")
    expected_time_now = f"{current_date} {expected_arrival_time}"
    
    for filename in sorted(all_filenames):
        if filename in current_files:
            # File currently exists - use current data
            final_entries.append(current_files[filename])
            print(f"✓ Active: {filename}")
        else:
            # File doesn't exist currently but was tracked before
            if filename in existing_files:
                # Create "File Not Found" entry
                missing_entry = [
                    filename,
                    'File Not Found',
                    'File Not Found',
                    expected_time_now
                ]
                final_entries.append(missing_entry)
                print(f"⚠ Missing: {filename}")
    
    # Write the updated file
    with open(output_txt, 'w', encoding='utf-8') as f:
        for entry in final_entries:
            f.write('\t'.join(entry) + '\n')
    
    print(f"\nUpdated ppredefinedfiles.txt saved to: {output_txt}")
    print(f"Total files tracked: {len(final_entries)}")
    
    # Summary
    active_count = len(current_files)
    missing_count = len(final_entries) - active_count
    print(f"Active files: {active_count}")
    print(f"Missing files: {missing_count}")

# Entry Point
if __name__ == "__main__":
    config = load_config('config.txt')
    scan_and_generate(config)
