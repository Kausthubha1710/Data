1. Don’t update metadata, only insert

Change metadata_updater.py:

class MetadataUpdater:
    def update_metadata(self):
        self.db_manager.ensure_table(self.table_name, self.metadata_data[0] if self.metadata_data else {})
        # Always insert, never update
        self.db_manager.insert_rows(self.table_name, self.metadata_data)

2. Let Postgres handle id (auto-increment)

In db_manager.ensure_table, make id a serial/identity column:

def ensure_table(self, table_name: str, sample_row: dict):
    qualified_name = sql.Identifier(self.schema, table_name)
    column_defs = []
    for col, val in sample_row.items():
        if col == "id":
            column_defs.append(sql.SQL('"id" SERIAL PRIMARY KEY'))
            continue
        pg_type = self._postgres_type(val)
        column_defs.append(sql.SQL("{} {}").format(sql.Identifier(col), sql.SQL(pg_type)))
    column_defs_sql = sql.SQL(", ").join(column_defs)
    create_table_sql = sql.SQL("CREATE TABLE IF NOT EXISTS {} ({})").format(qualified_name, column_defs_sql)
    with self.conn.cursor() as cur:
        cur.execute(create_table_sql)
        self.conn.commit()

3. Don’t insert "id" values

In db_manager.insert_rows:

def insert_rows(self, table_name: str, rows: list[dict]):
    if not rows:
        return

    existing_columns = self._get_existing_columns(table_name)

    # exclude id if it exists in the table (Postgres will auto-generate)
    if "id" in existing_columns:
        for r in rows:
            r.pop("id", None)

    all_columns = set()
    for r in rows:
        all_columns.update(r.keys())

    column_order = sorted(list(set(existing_columns) & set(all_columns)))
    values = [[row.get(col, None) for col in column_order] for row in rows]

    qualified_name = sql.Identifier(self.schema, table_name)
    cols = sql.SQL(",").join(map(sql.Identifier, column_order))

    insert_sql = sql.SQL("INSERT INTO {} ({}) VALUES %s").format(qualified_name, cols)

    with self.conn.cursor() as cur:
        execute_values(cur, insert_sql, values, page_size=100)
        self.conn.commit()
