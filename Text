import os
import re
from datetime import datetime

def load_config(config_file):
    config = {}
    if not os.path.exists(config_file):
        raise FileNotFoundError(f"Config file not found: {config_file}")
    with open(config_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and '=' in line:
                key, value = line.split('=', 1)
                config[key.strip()] = value.strip()
    return config

def get_common_user_dirs():
    user_root = "C:\\Users"
    dirs_to_scan = []
    for user in os.listdir(user_root):
        user_path = os.path.join(user_root, user)
        if os.path.isdir(user_path):
            for sub in ["Documents", "Downloads", "Desktop"]:
                sub_path = os.path.join(user_path, sub)
                if os.path.exists(sub_path):
                    dirs_to_scan.append(sub_path)
    return dirs_to_scan

def read_input_paths(input_file):
    if not input_file or not os.path.exists(input_file):
        print("⚠️ INPUT_FILE not found or not defined, using common user directories.")
        return get_common_user_dirs()
    with open(input_file, 'r', encoding='utf-8') as f:
        return [line.strip() for line in f if line.strip() and os.path.exists(line.strip())]

def get_creation_time(path):
    try:
        return os.path.getctime(path)
    except Exception:
        return None

def compile_patterns(pattern_str):
    patterns = [p.strip() for p in pattern_str.split(',') if p.strip()]
    return [re.compile(p) for p in patterns]

def scan_and_generate(config):
    input_file = config.get('IINPUT_FILE')
    output_dir = config.get('OOUTPUT_DIR')
    expected_arrival = config.get('EXPECTED_ARRIVAL_TIME', '')
    pattern_str = config.get('FILENAME_PATTERNS')

    if not pattern_str:
        raise ValueError("FILENAME_PATTERNS must be defined in config.txt")

    compiled_patterns = compile_patterns(pattern_str)

    if not output_dir or not os.path.isdir(output_dir):
        print("⚠️ OUTPUT_DIR not defined or invalid in config.txt. Using Downloads folder as fallback.")
        current_user = os.getlogin()
        output_dir = os.path.join("C:\\Users", current_user, "Downloads")

    output_txt = os.path.join(output_dir, "ppredefinedfiles.txt")
    os.makedirs(output_dir, exist_ok=True)

    directories = read_input_paths(input_file)

    # Load existing entries (fixed filenames)
    existing_data = {}
    if os.path.exists(output_txt):
        with open(output_txt, 'r', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split('\t')
                if len(parts) >= 4:
                    existing_data[parts[0]] = parts  # key = filename

    # Find current matching files
    current_files = {}
    for root_dir in directories:
        for dirpath, _, filenames in os.walk(root_dir):
            for filename in filenames:
                if any(p.match(filename) for p in compiled_patterns):
                    full_path = os.path.join(dirpath, filename)
                    ctime = get_creation_time(full_path)
                    if ctime:
                        actual_dt = datetime.fromtimestamp(ctime)
                        actual_time = actual_dt.strftime("%Y-%m-%d %H:%M:%S")
                        if expected_arrival:
                            expected_time = f"{actual_dt.strftime('%Y-%m-%d')} {expected_arrival}"
                        else:
                            expected_time = actual_time
                        current_files[filename] = [filename, actual_time, full_path, expected_time]

    # Build final entries
    all_filenames = set(existing_data.keys()).union(set(current_files.keys()))
    final_entries = []

    for filename in sorted(all_filenames):
        if filename in current_files:
            final_entries.append('\t'.join(current_files[filename]))
        else:
            # File is missing
            previous = existing_data.get(filename, [filename, '0', 'File Not Found', ''])
            previous[1] = '0'  # Actual arrival time
            previous[2] = 'File Not Found'
            final_entries.append('\t'.join(previous))

    with open(output_txt, 'w', encoding='utf-8') as f:
        for entry in final_entries:
            f.write(entry + '\n')

    print(f"✅ Updated ppredefinedfiles.txt saved to: {output_txt}")



# -------- Entry Point --------
if __name__ == "__main__":
    config = load_config('config.txt')
    scan_and_generate(config)



app.py



from flask import Flask, render_template, request
import pandas as pd
import os
import urllib.parse
from datetime import datetime

app = Flask(__name__)  # Fixed missing '='

# Load config
def load_config(config_file):
    config = {}
    with open(config_file, 'r') as f:
        for line in f:
            line = line.strip()
            if line and '=' in line:
                key, value = line.split('=', 1)
                config[key.strip()] = value.strip()
    return config

config = load_config('config.txt')
EXCEL_FILE_PATH = config['EXCEL_FILE_PATH']

# Get expected arrival time from dashboard
def get_expected_arrival_time(path):
    df = pd.read_excel(EXCEL_FILE_PATH, sheet_name='Dashboard')
    df['Directory_norm'] = df['Directory'].apply(lambda p: os.path.normpath(p))
    norm_path = os.path.normpath(path)
    matched_rows = df[df['Directory_norm'] == norm_path]
    if not matched_rows.empty:
        val = matched_rows.iloc[0]['Expected Arrival Time']
        try:
            dt_str = val.replace(' IST', '')
            return datetime.strptime(dt_str, '%Y-%m-%d %H:%M:%S')
        except Exception:
            return None
    return None

@app.route('/')
def index():
    search_query = request.args.get('search', '').lower()
    df = pd.read_excel(EXCEL_FILE_PATH, sheet_name='Dashboard')
    df['Directory'] = df['Directory'].apply(lambda p: os.path.normpath(p))

    if search_query:
        df = df[df['File name'].str.lower().str.contains(search_query)]

    if 'Click to view' in df.columns:
        df.drop(columns=['Click to view'], inplace=True)

    df['Click to view'] = df['Directory'].apply(
        lambda p: f'<a href="/file_summary?path={urllib.parse.quote(p)}" target="_blank">View</a>'
    )

    def highlight_status(row):
        styles = [''] * len(row)

        # Prioritize NOK case without depending on time parsing
        if row['File received (OK/NOK)'] == 'NOK':
            styles = ['background-color: salmon'] * len(row)
        else:
            try:
                actual_time = datetime.strptime(row['time (IST)'].replace(' IST', ''), '%Y-%m-%d %H:%M:%S')
                expected_time = datetime.strptime(row['Expected Arrival Time'].replace(' IST', ''), '%Y-%m-%d %H:%M:%S')
                
                if actual_time > expected_time:
                    styles = ['background-color: #FFC000'] * len(row)  # Late
                else:
                    styles = ['background-color: lightgreen'] * len(row)  # On time
            except Exception:
                pass  # Invalid time values — leave default styles

        return styles




    styled_df = df.style.apply(highlight_status, axis=1)
    table_html = styled_df.to_html(escape=False)

    return render_template('dashboard.html', table_html=table_html)

@app.route('/file_summary')
def file_summary():
    file_path = request.args.get('path')
    if not file_path:
        return "No file path provided."

    decoded_path = os.path.normpath(urllib.parse.unquote(file_path))
    expected_time = get_expected_arrival_time(decoded_path)

    if os.path.exists(decoded_path):
        creation_time_epoch = os.path.getctime(decoded_path)
        creation_time = datetime.fromtimestamp(creation_time_epoch)
        formatted_time = creation_time.strftime("%Y-%m-%d %H:%M:%S")

        if expected_time:
            if creation_time > expected_time:
                delay = creation_time - expected_time
                delay_str = str(delay).split('.')[0]
                status_text = f"Delayed by {delay_str}"
                status_color = "#FFC000"  # Yellow
            else:
                status_text = "Available"
                status_color = "lightgreen"
        else:
            status_text = "Available"
            status_color = "lightgreen"
    else:
        status_text = "File not found"
        status_color = "salmon"

    summary = f"""
    <h2>File Summary</h2>
    <p><strong>File:</strong> {os.path.basename(decoded_path)}</p>
    <p><strong>Status:</strong> <span style="background-color: {status_color}; padding: 2px 6px; border-radius: 4px;">{status_text}</span></p>
    <p><strong>Arrival Time:</strong> {formatted_time if os.path.exists(decoded_path) else 'N/A'}</p>
    <p><strong>Expected Arrival Time:</strong> {expected_time.strftime('%Y-%m-%d %H:%M:%S') if expected_time else 'N/A'}</p>
    <p><strong>Full Path:</strong> {decoded_path}</p>
    """
    return summary

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=5000, debug=True)




from flask import Flask, request, render_template_string
import pandas as pd
import os
import urllib.parse
from datetime import datetime

app = Flask(__name__)

EXCEL_FILE_PATH = r"C:\Users\hs9281\Downloads\files\dashboard.xlsx"

@app.route('/')
def index():
    search_query = request.args.get('search', '').lower()

    # Read and clean Excel file
    df = pd.read_excel(EXCEL_FILE_PATH, sheet_name='Dashboard')
    df.columns = df.columns.str.strip()  # Remove any extra spaces in column names

    # Normalize path
    if 'Directory' in df.columns:
        df['Directory'] = df['Directory'].apply(lambda p: os.path.normpath(str(p)))

    # Apply search filter
    if search_query:
        df = df[df['File name'].str.lower().str.contains(search_query)]

    # Safely generate 'Click to view' column
    if 'Click to view' in df.columns:
        df.drop(columns=['Click to view'], inplace=True)

    if 'Directory' in df.columns and 'File name' in df.columns:
        df['Click to view'] = df.apply(
            lambda row: f'<a href="/file_summary?path={urllib.parse.quote(os.path.join(str(row["Directory"]), str(row["File name"])))}" target="_blank">View</a>',
            axis=1
        )

    # Conditional formatting for HTML rendering
    def highlight_status(row):
        style = [''] * len(row)
        try:
            if row['File received (OK/NOK)'] == 'NOK':
                style = ['background-color: salmon'] * len(row)
            elif 'Expected Arrival Time' in row and 'time (IST)' in row:
                expected = datetime.strptime(row['Expected Arrival Time'].replace(' IST', ''), '%Y-%m-%d %H:%M:%S')
                actual = datetime.strptime(row['time (IST)'].replace(' IST', ''), '%Y-%m-%d %H:%M:%S')
                if actual > expected:
                    style = ['background-color: salmon'] * len(row)
                else:
                    style = ['background-color: lightgreen'] * len(row)
        except Exception:
            pass
        return style

    styled_df = df.style.apply(highlight_status, axis=1).hide(axis='index').to_html(escape=False)

    return render_template_string("""
        <html>
            <head><title>Dashboard</title></head>
            <body>
                <h2>Dashboard</h2>
                <form method="get">
                    <input type="text" name="search" placeholder="Search filename..." value="{{ request.args.get('search', '') }}">
                    <button type="submit">Search</button>
                </form>
                {{ table | safe }}
            </body>
        </html>
    """, table=styled_df)
