import os
import re
from datetime import datetime

def load_config(config_file):
    config = {}
    if not os.path.exists(config_file):
        raise FileNotFoundError(f"Config file not found: {config_file}")
    with open(config_file, 'r', encoding='utf-8') as f:
        for line in f:
            line = line.strip()
            if line and '=' in line:
                key, value = line.split('=', 1)
                config[key.strip()] = value.strip()
    return config

def get_common_user_dirs():
    user_root = "C:\\Users"
    dirs_to_scan = []
    for user in os.listdir(user_root):
        user_path = os.path.join(user_root, user)
        if os.path.isdir(user_path):
            for sub in ["Documents", "Downloads", "Desktop"]:
                sub_path = os.path.join(user_path, sub)
                if os.path.exists(sub_path):
                    dirs_to_scan.append(sub_path)
    return dirs_to_scan

def read_input_paths(input_file):
    if not input_file or not os.path.exists(input_file):
        print("⚠️ INPUT_FILE not found or not defined, using common user directories.")
        return get_common_user_dirs()
    with open(input_file, 'r', encoding='utf-8') as f:
        return [line.strip() for line in f if line.strip() and os.path.exists(line.strip())]

def get_creation_time(path):
    try:
        return os.path.getctime(path)
    except Exception:
        return None

def compile_patterns(pattern_str):
    patterns = [p.strip() for p in pattern_str.split(',') if p.strip()]
    return [re.compile(p) for p in patterns]

def scan_and_generate(config):
    input_file = config.get('IINPUT_FILE')
    output_dir = config.get('OOUTPUT_DIR')
    expected_arrival = config.get('EXPECTED_ARRIVAL_TIME', '')
    pattern_str = config.get('FILENAME_PATTERNS')

    if not pattern_str:
        raise ValueError("FILENAME_PATTERNS must be defined in config.txt")

    compiled_patterns = compile_patterns(pattern_str)

    if not output_dir or not os.path.isdir(output_dir):
        print("⚠️ OUTPUT_DIR not defined or invalid in config.txt. Using Downloads folder as fallback.")
        current_user = os.getlogin()
        output_dir = os.path.join("C:\\Users", current_user, "Downloads")

    output_txt = os.path.join(output_dir, "ppredefinedfiles.txt")
    os.makedirs(output_dir, exist_ok=True)

    directories = read_input_paths(input_file)

    # Load existing entries (fixed filenames)
    existing_data = {}
    if os.path.exists(output_txt):
        with open(output_txt, 'r', encoding='utf-8') as f:
            for line in f:
                parts = line.strip().split('\t')
                if len(parts) >= 4:
                    existing_data[parts[0]] = parts  # key = filename

    # Find current matching files
    current_files = {}
    for root_dir in directories:
        for dirpath, _, filenames in os.walk(root_dir):
            for filename in filenames:
                if any(p.match(filename) for p in compiled_patterns):
                    full_path = os.path.join(dirpath, filename)
                    ctime = get_creation_time(full_path)
                    if ctime:
                        actual_dt = datetime.fromtimestamp(ctime)
                        actual_time = actual_dt.strftime("%Y-%m-%d %H:%M:%S")
                        if expected_arrival:
                            expected_time = f"{actual_dt.strftime('%Y-%m-%d')} {expected_arrival}"
                        else:
                            expected_time = actual_time
                        current_files[filename] = [filename, actual_time, full_path, expected_time]

    # Build final entries
    all_filenames = set(existing_data.keys()).union(set(current_files.keys()))
    final_entries = []

    for filename in sorted(all_filenames):
        if filename in current_files:
            final_entries.append('\t'.join(current_files[filename]))
        else:
            # File is missing
            previous = existing_data.get(filename, [filename, '0', 'File Not Found', ''])
            previous[1] = '0'  # Actual arrival time
            previous[2] = 'File Not Found'
            final_entries.append('\t'.join(previous))

    with open(output_txt, 'w', encoding='utf-8') as f:
        for entry in final_entries:
            f.write(entry + '\n')

    print(f"✅ Updated ppredefinedfiles.txt saved to: {output_txt}")



# -------- Entry Point --------
if __name__ == "__main__":
    config = load_config('config.txt')
    scan_and_generate(config)
