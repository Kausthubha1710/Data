Project Title:

Automated File Monitoring and Reporting Dashboard


---

Problem Statement:

In data-sensitive environments, it's critical to ensure that all expected files arrive on time and in the correct directories. However, manually verifying the presence, arrival time, and correctness of numerous files across multiple locations is inefficient and error-prone. There is a need for an automated system to monitor, validate, and report file delivery status with a clear, accessible summary for operational teams.


---

Details of the Problem:

Key Issues:

File Delivery Tracking: Teams often expect multiple files daily across different directories, but lack visibility into whether files have arrived on time.

Manual Effort: Checking file presence and logging metadata like creation time manually is time-consuming.

Lack of Centralized Reporting: There’s no easy way to track the delivery status of all files in one place.

Delayed/Missing Files: When files are delayed or missing, the downstream systems or analysts often don’t get alerted immediately.

Accessibility: Stakeholders want a simple report they can open and understand without using additional tools or apps.



---

Solution Overview:

The project provides an automated Python script that:

Reads a configuration of expected files, including their paths and expected arrival times.

Checks if each file exists and verifies its creation time.

Updates the predefined file list with actual timestamps to keep it current.

Generates per-file .txt summary reports.

Compiles all results into a dashboard-style Excel file, with:

File names and paths

Actual and expected arrival times

Status marked as OK, NOK, or Delayed

Hyperlinks to detailed .txt summaries

Conditional formatting for easy visual identification




---

Solution Provided:

Workflow:

1. Configuration Loading:

Reads from config.txt to get paths for input list, output folder, and Excel dashboard.



2. File Monitoring Logic:

Loads predefinedfiles.txt (tab-separated) with:

File name

Expected path

Expected creation/arrival time


For each entry, checks:

Whether the file exists.

Whether it arrived before the expected time.

Updates actual creation time if file is found.




3. Summary Generation:

For every file, creates a .txt summary capturing:

File name

Status (OK, NOK, Delayed)

Creation timestamp

Expected arrival time

Full file path




4. Excel Dashboard Creation:

Compiles all results into a single dashboard using pandas and xlsxwriter

Adds conditional formatting:

Green for OK

Red for NOK

Grey for N/A


Adds clickable hyperlinks to summary .txt files using file:/// links



5. Output:

Static .xlsx dashboard

Text summaries in a subfolder

Updated predefinedfiles.txt for future runs





---

Technologies Used:

Technology	Purpose

Python 3	Core scripting and automation
Pandas	Data manipulation and Excel generation
XlsxWriter	Excel dashboard formatting and hyperlinking
os, datetime, urllib	File path handling, timestamps, URL-safe filenames
Text files (.txt)	Configuration and summary reports
Excel (.xlsx)	Final output dashboard
Windows/Linux (Local or Server)	Execution environment



---

Deployment Flexibility:

Runs locally or on a shared server

Can be scheduled via Windows Task Scheduler or Linux cron

Outputs can be stored on network drives, SharePoint, or cloud-shared folders for team-wide access



---

Benefits:

Centralized file status reporting

Quick visibility into delays or missing files

Accessible reports without additional software

Easily extendable or integrable with other systems


