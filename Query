Step 1. Check the column type

Run:

\d pilothouse.wasabi_infora02_reporting

If ImportDate is TEXT / VARCHAR, that’s why the formats differ.

If it’s already a proper DATE, PostgreSQL will store everything consistently, and it’s just a display issue depending on your datestyle.


---

✅ Step 2. Convert all to DATE

If ImportDate is text, first safely convert all rows into real DATE values using to_date() with multiple formats:

SELECT ImportDate,
       CASE
         WHEN ImportDate ~ '^\d{4}-\d{2}-\d{2}$' 
           THEN to_date(ImportDate, 'YYYY-MM-DD')
         WHEN ImportDate ~ '^\d{2}-\d{2}-\d{2}$' 
           THEN to_date(ImportDate, 'DD-MM-YY')
         ELSE NULL
       END AS normalized_date
FROM pilothouse.wasabi_infora02_reporting;

That way you can preview how each row converts.


---

✅ Step 3. Update the table

Once you’re confident, you can update in place:

UPDATE pilothouse.wasabi_infora02_reporting
SET ImportDate = CASE
    WHEN ImportDate ~ '^\d{4}-\d{2}-\d{2}$' 
      THEN to_char(to_date(ImportDate, 'YYYY-MM-DD'), 'YYYY-MM-DD')
    WHEN ImportDate ~ '^\d{2}-\d{2}-\d{2}$' 
      THEN to_char(to_date(ImportDate, 'DD-MM-YY'), 'YYYY-MM-DD')
    ELSE ImportDate
  END;


---

⚡ Even Better (Recommended)

Instead of storing as text, convert the column type once:

ALTER TABLE pilothouse.wasabi_infora02_reporting
ALTER COLUMN ImportDate TYPE date
USING (
  CASE
    WHEN ImportDate ~ '^\d{4}-\d{2}-\d{2}$' 
      THEN to_date(ImportDate, 'YYYY-MM-DD')
    WHEN ImportDate ~ '^\d{2}-\d{2}-\d{2}$' 
      THEN to_date(ImportDate, 'DD-MM-YY')
  END
);

After this, ImportDate will always be a proper DATE. PostgreSQL will internally store it consistently, and when you SELECT, it will display as YYYY-MM-DD.
