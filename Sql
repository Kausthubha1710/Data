-- Assuming you have a temporary table or staging table `incoming_data`
-- which contains today's received file data.

-- STEP 1: Insert NEW records into main table
INSERT INTO PAM_Cyberarck_reportname (
    Instance, Metier2, SafeName, BAM_ID, AppName, AppStatus,
    EntitlementOwnerUID, EntitlementOwnerName, EntitlementOwnerMetier,
    EntitlementOwnerSite, NbSafeUsers, NbSafeUsersWithOwnerRight,
    NbSafeUsersWithBreakglassRight, NbSafeUsersWithDEVRight,
    NbSafeUsersWithConsultRight, SafeCreationDate, `LastUsed HumanDate`,
    ImportDate, Assignee, Action, Remediation, Comments
)
SELECT 
    i.Instance, i.Metier2, i.SafeName, i.BAM_ID, i.AppName, i.AppStatus,
    i.EntitlementOwnerUID, i.EntitlementOwnerName, i.EntitlementOwnerMetier,
    i.EntitlementOwnerSite, i.NbSafeUsers, i.NbSafeUsersWithOwnerRight,
    i.NbSafeUsersWithBreakglassRight, i.NbSafeUsersWithDEVRight,
    i.NbSafeUsersWithConsultRight, i.SafeCreationDate, i.`LastUsed HumanDate`,
    CURRENT_DATE, i.Assignee, i.Action, i.Remediation, i.Comments
FROM incoming_data i
LEFT JOIN PAM_Cyberarck_reportname p
  ON i.SafeName = p.SafeName
WHERE p.SafeName IS NULL;

-- STEP 2: Update existing records' ImportDate
UPDATE PAM_Cyberarck_reportname p
JOIN incoming_data i ON p.SafeName = i.SafeName
SET 
    p.Instance = i.Instance,
    p.Metier2 = i.Metier2,
    p.BAM_ID = i.BAM_ID,
    p.AppName = i.AppName,
    p.AppStatus = i.AppStatus,
    p.EntitlementOwnerUID = i.EntitlementOwnerUID,
    p.EntitlementOwnerName = i.EntitlementOwnerName,
    p.EntitlementOwnerMetier = i.EntitlementOwnerMetier,
    p.EntitlementOwnerSite = i.EntitlementOwnerSite,
    p.NbSafeUsers = i.NbSafeUsers,
    p.NbSafeUsersWithOwnerRight = i.NbSafeUsersWithOwnerRight,
    p.NbSafeUsersWithBreakglassRight = i.NbSafeUsersWithBreakglassRight,
    p.NbSafeUsersWithDEVRight = i.NbSafeUsersWithDEVRight,
    p.NbSafeUsersWithConsultRight = i.NbSafeUsersWithConsultRight,
    p.SafeCreationDate = i.SafeCreationDate,
    p.`LastUsed HumanDate` = i.`LastUsed HumanDate`,
    p.ImportDate = CURRENT_DATE,
    p.Assignee = i.Assignee,
    p.Action = i.Action,
    p.Remediation = i.Remediation,
    p.Comments = i.Comments
WHERE EXISTS (
    SELECT 1 FROM incoming_data i2
    WHERE i2.SafeName = p.SafeName
);

-- STEP 3: Insert into metadata table for each received file
INSERT INTO PAM_Cyberarck_reportname_metadata (SafeId, SafeName, present_on)
SELECT 
    p.id, p.SafeName, CURRENT_DATE
FROM PAM_Cyberarck_reportname p
JOIN incoming_data i ON i.SafeName = p.SafeName;



BEGIN

  FOR each file_record IN today's_received_files:

    SET safe_name = file_record.SafeName

    -- Check if the SafeName already exists in the main table
    IF safe_name EXISTS IN PAM_Cyberarck_reportname THEN

        -- CASE 1: File already exists → Update its ImportDate and other fields
        UPDATE PAM_Cyberarck_reportname
        SET 
          Instance = file_record.Instance,
          Metier2 = file_record.Metier2,
          BAM_ID = file_record.BAM_ID,
          AppName = file_record.AppName,
          AppStatus = file_record.AppStatus,
          EntitlementOwnerUID = file_record.EntitlementOwnerUID,
          EntitlementOwnerName = file_record.EntitlementOwnerName,
          EntitlementOwnerMetier = file_record.EntitlementOwnerMetier,
          EntitlementOwnerSite = file_record.EntitlementOwnerSite,
          NbSafeUsers = file_record.NbSafeUsers,
          NbSafeUsersWithOwnerRight = file_record.NbSafeUsersWithOwnerRight,
          NbSafeUsersWithBreakglassRight = file_record.NbSafeUsersWithBreakglassRight,
          NbSafeUsersWithDEVRight = file_record.NbSafeUsersWithDEVRight,
          NbSafeUsersWithConsultRight = file_record.NbSafeUsersWithConsultRight,
          SafeCreationDate = file_record.SafeCreationDate,
          LastUsed_HumanDate = file_record.LastUsed_HumanDate,
          ImportDate = CURRENT_DATE,
          Assignee = file_record.Assignee,
          Action = file_record.Action,
          Remediation = file_record.Remediation,
          Comments = file_record.Comments
        WHERE SafeName = safe_name

    ELSE

        -- CASE 3: New file → Insert into main table
        INSERT INTO PAM_Cyberarck_reportname (
          Instance, Metier2, SafeName, BAM_ID, AppName, AppStatus,
          EntitlementOwnerUID, EntitlementOwnerName, EntitlementOwnerMetier,
          EntitlementOwnerSite, NbSafeUsers, NbSafeUsersWithOwnerRight,
          NbSafeUsersWithBreakglassRight, NbSafeUsersWithDEVRight,
          NbSafeUsersWithConsultRight, SafeCreationDate, LastUsed_HumanDate,
          ImportDate, Assignee, Action, Remediation, Comments
        )
        VALUES (
          file_record.Instance, file_record.Metier2, file_record.SafeName, file_record.BAM_ID,
          file_record.AppName, file_record.AppStatus, file_record.EntitlementOwnerUID,
          file_record.EntitlementOwnerName, file_record.EntitlementOwnerMetier,
          file_record.EntitlementOwnerSite, file_record.NbSafeUsers,
          file_record.NbSafeUsersWithOwnerRight, file_record.NbSafeUsersWithBreakglassRight,
          file_record.NbSafeUsersWithDEVRight, file_record.NbSafeUsersWithConsultRight,
          file_record.SafeCreationDate, file_record.LastUsed_HumanDate,
          CURRENT_DATE, file_record.Assignee, file_record.Action,
          file_record.Remediation, file_record.Comments
        )

    END IF

    -- In both cases (new or existing file), log arrival in metadata table
    GET id FROM PAM_Cyberarck_reportname WHERE SafeName = safe_name

    INSERT INTO PAM_Cyberarck_reportname_metadata (
      SafeId, SafeName, present_on
    ) VALUES (
      id, safe_name, CURRENT_DATE
    )

  END FOR

END
