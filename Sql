CREATE TABLE SafeData (
    id INT AUTO_INCREMENT PRIMARY KEY,
    Metier2 VARCHAR(255),
    SafeName VARCHAR(255),
    BAM_ID INT,
    AppName VARCHAR(255),
    Instance VARCHAR(255),
    AppStatus VARCHAR(255),
    EntitlementOwnerUID VARCHAR(255),
    EntitlementOwnerName VARCHAR(255),
    EntitlementOwnerMetier VARCHAR(255),
    EntitlementOwnerSite VARCHAR(255),
    NB_Accounts INT,
    SafeCreationDate DATETIME,
    LastUsedHumanDate DATETIME,
    ImportDate DATETIME,
    Assignee VARCHAR(255),
    Action VARCHAR(255),
    Remediation VARCHAR(255),
    Comments VARCHAR(255),
    NbSafeUsers INT,
    NbSafeUsersWithOwnerRight INT,
    NbSafeUsersWithBreakglassRight INT,
    NbSafeUsersWithDEVRight INT,
    NbSafeUsersWithConsultRight INT,
    UNIQUE KEY (id, SafeName)
);

CREATE TABLE metadata (
    id INT,
    Metier2 VARCHAR(255),
    SafeName VARCHAR(255),
    BAM_ID INT,
    AppName VARCHAR(255),
    Instance VARCHAR(255),
    AppStatus VARCHAR(255),
    EntitlementOwnerUID VARCHAR(255),
    EntitlementOwnerName VARCHAR(255),
    EntitlementOwnerMetier VARCHAR(255),
    EntitlementOwnerSite VARCHAR(255),
    NB_Accounts INT,
    SafeCreationDate DATETIME,
    LastUsedHumanDate DATETIME,
    ImportDate DATETIME,
    Assignee VARCHAR(255),
    Action VARCHAR(255),
    Remediation VARCHAR(255),
    Comments VARCHAR(255),
    NbSafeUsers INT,
    NbSafeUsersWithOwnerRight INT,
    NbSafeUsersWithBreakglassRight INT,
    NbSafeUsersWithDEVRight INT,
    NbSafeUsersWithConsultRight INT,
    latest_import_date DATETIME,
    PRIMARY KEY (SafeName)  -- assumes SafeName is unique
);


CREATE TABLE history (
    sno INT AUTO_INCREMENT PRIMARY KEY,
    report_id INT,
    present_on DATE,
    FOREIGN KEY (report_id) REFERENCES SafeData(id)
);

-- Declare a flag variable to stop the loop when all rows are fetched
DECLARE done INT DEFAULT 0;

-- Declare variables to store each row from SafeData as we iterate
DECLARE v_id INT;
DECLARE v_safename VARCHAR(255);
DECLARE v_import_date DATE;

-- Declare a cursor to select all rows from SafeData table
DECLARE cur CURSOR FOR
  SELECT id, SafeName, ImportDate FROM SafeData;

-- Tell MySQL what to do when the cursor reaches the end of the table
-- In this case, we set the 'done' flag to 1 so the loop can stop
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

-- Open the cursor to start reading rows
OPEN cur;

-- Start the loop that reads one row at a time from SafeData
read_loop: LOOP
  -- Fetch the next row into our declared variables
  FETCH cur INTO v_id, v_safename, v_import_date;

  -- If we have no more rows, exit the loop
  IF done THEN
    LEAVE read_loop;
  END IF;

  -- Check if the SafeName + id combo is already present in metadata table
  IF NOT EXISTS (
    SELECT 1 FROM metadata WHERE SafeName = v_safename AND id = v_id
  ) THEN
    -- If not found, insert this row into metadata
    INSERT INTO metadata (id, SafeName, latest_import_date)
    VALUES (v_id, v_safename, v_import_date);
  
  ELSE
    -- If already exists, check if ImportDate is newer than what's in metadata
    -- If yes, then update latest_import_date in metadata
    UPDATE metadata
    SET latest_import_date = v_import_date
    WHERE SafeName = v_safename AND latest_import_date < v_import_date;
  END IF;

-- End of loop, go to next row
END LOOP;

-- Close the cursor after processing all rows
CLOSE cur;



-- Step 1: Change the delimiter so we can write multi-line trigger bodies
DELIMITER $$

-- üîÅ TRIGGER 1: Run after a new row is inserted into metadata
CREATE TRIGGER trg_after_metadata_insert
AFTER INSERT ON metadata
FOR EACH ROW
BEGIN
    -- ‚è∫ Automatically insert a new record into history table
    -- to record the first import of this report_id (metadata.id)
    INSERT INTO history (report_id, present_on)
    VALUES (NEW.id, NEW.latest_import_date);
END$$

-- üîÅ TRIGGER 2: Run after an existing row in metadata is updated
CREATE TRIGGER trg_after_metadata_update
AFTER UPDATE ON metadata
FOR EACH ROW
BEGIN
    -- üß† Only log to history if the latest_import_date has changed
    IF NEW.latest_import_date <> OLD.latest_import_date THEN
        -- ‚è∫ Record the change into history
        INSERT INTO history (report_id, present_on)
        VALUES (NEW.id, NEW.latest_import_date);
    END IF;
END$$

-- Step 2: Revert delimiter to default
DELIMITER ;
