import os
import json
import datetime
import xml.etree.ElementTree as ET

def extract_reportname(filename):
    return filename.split('-')[-1].split('.')[0].strip()

def get_today():
    return datetime.date.today().isoformat()

def load_existing_json(path):
    if os.path.exists(path):
        with open(path, 'r') as f:
            return json.load(f)
    return []

def save_json(path, data):
    with open(path, 'w') as f:
        json.dump(data, f, indent=4)

def parse_xml_to_records(filepath, today_str):
    tree = ET.parse(filepath)
    root = tree.getroot()

    records = []
    for safe in root.findall('.//Safe'):
        record = {
            'Instance': safe.findtext('Instance'),
            'Metier2': safe.findtext('Metier2'),
            'SafeName': safe.findtext('SafeName'),
            'BAM_ID': safe.findtext('BAM_ID'),
            'AppName': safe.findtext('AppName'),
            'AppStatus': safe.findtext('AppStatus'),
            'EntitlementOwnerUID': safe.findtext('EntitlementOwnerUID'),
            'EntitlementOwnerName': safe.findtext('EntitlementOwnerName'),
            'EntitlementOwnerMetier': safe.findtext('EntitlementOwnerMetier'),
            'EntitlementOwnerSite': safe.findtext('EntitlementOwnerSite'),
            'NbSafeUsers': int(safe.findtext('NbSafeUsers') or 0),
            'NbSafeUsersWithOwnerRight': int(safe.findtext('NbSafeUsersWithOwnerRight') or 0),
            'NbSafeUsersWithBreakglassRight': int(safe.findtext('NbSafeUsersWithBreakglassRight') or 0),
            'NbSafeUsersWithDEVRight': int(safe.findtext('NbSafeUsersWithDEVRight') or 0),
            'NbSafeUsersWithConsultRight': int(safe.findtext('NbSafeUsersWithConsultRight') or 0),
            'SafeCreationDate': safe.findtext('SafeCreationDate'),
            'LastUsed HumanDate': safe.findtext('LastUsed HumanDate'),
            'Assignee': safe.findtext('Assignee'),
            'Action': safe.findtext('Action'),
            'Remediation': safe.findtext('Remediation'),
            'Comments': safe.findtext('Comments'),
            'ImportDate': today_str
        }
        records.append(record)
    return records

def generate_metadata(records, today_str):
    metadata = []
    for idx, record in enumerate(records):
        metadata.append({
            'SafeId': idx + 1,
            'SafeName': record['SafeName'],
            'present_on': today_str
        })
    return metadata

def main(xml_path):
    filename = os.path.basename(xml_path)
    reportname = extract_reportname(filename)

    main_json_path = f'PAM_Cyberarck_{reportname}.json'
    meta_json_path = f'PAM_Cyberarck_{reportname}_metadata.json'

    today_str = get_today()
    new_records = parse_xml_to_records(xml_path, today_str)
    old_records = load_existing_json(main_json_path)
    combined = []
    safename_set_today = {r['SafeName'] for r in new_records}

    # Preserve old records if not present today
    for record in old_records:
        if record['SafeName'] not in safename_set_today:
            combined.append(record)

    # Add/replace records present today with updated ImportDate
    for new_record in new_records:
        existing = next((r for r in old_records if r['SafeName'] == new_record['SafeName']), None)
        if existing:
            new_record['ImportDate'] = today_str
        combined.append(new_record)

    # Generate metadata only for today's records
    metadata_today = generate_metadata(new_records, today_str)

    save_json(main_json_path, combined)
    save_json(meta_json_path, metadata_today)

    print(f"‚úÖ Updated JSON saved to:\n - {main_json_path}\n - {meta_json_path}")

# Example usage:
# main("PAM Dashboard Management - SA09.xml")
































Suppose there are 20 files in the beginning. 
The data is reflected into metadata table accordingly.
Case 1:
Suppose "abc" File is received on 1st august the import datetime is 1st august then this is entered into metadata(2nd) table.
Now "abc" File is received on 2nd august. The import date of "abc" will be replaced to 2nd august in first table. In the metadata table also this is inserted.
So now metadata table consists data that received on 1st august and 2nd august.
Case 2:
Suppose "abc" File is received on 1st august the import datetime is 1st august then this is entered into metadata(2nd) table.
Now "abc" File is not received on 2nd august. The import date of "abc" will not be replaced to 2nd august in first table. In the metadata table nothing changes
So now metadata table consists data that received only on 1st august.
Case 3:
Apart from those 20 files Suppose a new file "xyz" arrived within all other 20 files on 4th august then along with the 20 files, "xyz" Data will also be inputed into metadata table.

Now did you understand the requirement? 
Now tell me what you understand with an example of 10 files. I need to see all cases


üéØ Setup:
Initial Files (10):

Copy
Edit
SafeA, SafeB, SafeC, SafeD, SafeE, SafeF, SafeG, SafeH, SafeI, SafeJ
üóìÔ∏è Simulation from August 1st to August 5th:
üìÖ Day 1: August 1
All 10 files arrive.

PAM_Cyberarck_reportname: Insert 10 rows with ImportDate = 2025-08-01

PAM_Cyberarck_reportname_metadata: Insert 10 rows with present_on = 2025-08-01

üìÖ Day 2: August 2
Only these files are received: SafeA, SafeB, SafeC, SafeD, SafeE

PAM_Cyberarck_reportname: Update ImportDate for SafeA-E to 2025-08-02

PAM_Cyberarck_reportname_metadata: Insert 5 rows for SafeA-E with present_on = 2025-08-02

SafeF‚ÄìJ: no changes

üìÖ Day 3: August 3
Only SafeA, SafeC are received.

reportname: Update ImportDate for SafeA, SafeC to 2025-08-03

metadata: Insert 2 rows for SafeA, SafeC with present_on = 2025-08-03

üìÖ Day 4: August 4
All 10 original files are received again + new file SafeX (üí° Case 3)

reportname:

Update ImportDate for SafeA-J to 2025-08-04

Insert new row for SafeX with ImportDate = 2025-08-04

metadata: Insert 11 rows (SafeA-J + SafeX) with present_on = 2025-08-04

üìÖ Day 5: August 5
Only SafeF, SafeH, SafeX are received

reportname: Update ImportDate for SafeF, SafeH, SafeX to 2025-08-05

metadata: Insert 3 rows for SafeF, SafeH, SafeX with present_on = 2025-08-05

üìä Final Snapshot Example:
üóÇÔ∏è PAM_Cyberarck_reportname (Latest Status Table)
id	SafeName	ImportDate
1	SafeA	2025-08-04
2	SafeB	2025-08-04
3	SafeC	2025-08-04
4	SafeD	2025-08-04
5	SafeE	2025-08-04
6	SafeF	2025-08-05
7	SafeG	2025-08-04
8	SafeH	2025-08-05
9	SafeI	2025-08-04
10	SafeJ	2025-08-04
11	SafeX	2025-08-05

üßæ PAM_Cyberarck_reportname_metadata (Arrival History Table)
id	SafeId	SafeName	present_on
1	1	SafeA	2025-08-01
2	2	SafeB	2025-08-01
3	3	SafeC	2025-08-01
4	4	SafeD	2025-08-01
5	5	SafeE	2025-08-01
6	6	SafeF	2025-08-01
7	7	SafeG	2025-08-01
8	8	SafeH	2025-08-01
9	9	SafeI	2025-08-01
10	10	SafeJ	2025-08-01
11	1	SafeA	2025-08-02
12	2	SafeB	2025-08-02
13	3	SafeC	2025-08-02
14	4	SafeD	2025-08-02
15	5	SafeE	2025-08-02
16	1	SafeA	2025-08-03
17	3	SafeC	2025-08-03
18	1	SafeA	2025-08-04
19	2	SafeB	2025-08-04
20	3	SafeC	2025-08-04
21	4	SafeD	2025-08-04
22	5	SafeE	2025-08-04
23	6	SafeF	2025-08-04
24	7	SafeG	2025-08-04
25	8	SafeH	2025-08-04
26	9	SafeI	2025-08-04
27	10	SafeJ	2025-08-04
28	11	SafeX	2025-08-04
29	6	SafeF	2025-08-05
30	8	SafeH	2025-08-05
31	11	SafeX	2025-08-05






















n the tablename PAM_cyberark_reportname.
PAM_cyberark_ is the common prefix for all tables and reportname varies based on the filename.
Suppose file name is PAM Dashboard Management - SA09.xml is the file then table name should be PAM_cyberark_SA09 
and the 2nd table PAM_cyberark_SA09_metadata.


import pandas as pd
import os
from pathlib import Path
import xml.etree.ElementTree as ET

filename = 'PAM Dashboard Management - SA09.xml'
reportname = filename.split('-')[-1].split('.')[0].strip()

main_table_name = f'PAM_cyberark_{reportname}.csv'
meta_table_name = f'PAM_cyberark_{reportname}_metadata.csv'

# Step 1: Create table if not exists
if not Path(main_table_name).exists():
    columns = ['Instance', 'Metier2', 'SafeName', 'BAM_ID', 'AppName', 'AppStatus',
               'EntitlementOwnerUID', 'EntitlementOwnerName', 'EntitlementOwnerMetier',
               'EntitlementOwnerSite', 'NbSafeUsers', 'NbSafeUsersWithOwnerRight',
               'NbSafeUsersWithBreakglassRight', 'NbSafeUsersWithDEVRight',
               'NbSafeUsersWithConsultRight', 'SafeCreationDate', 'LastUsed HumanDate',
               'ImportDate', 'Assignee', 'Action', 'Remediation', 'Comments']
    df = pd.DataFrame(columns=columns)
    df.to_csv(main_table_name, index=False)

# Step 2: Create metadata table if not exists
if not Path(meta_table_name).exists():
    meta_df = pd.DataFrame(columns=['SafeId', 'SafeName', 'present_on'])
    meta_df.to_csv(meta_table_name, index=False)

# Step 3: Parse XML and append rows (mock parsing shown)
tree = ET.parse(filename)
root = tree.getroot()

# Dummy values
row = {
    'Instance': 'SampleInstance',
    'Metier2': 'SampleMetier',
    'SafeName': 'SafeA',
    'BAM_ID': 1234,
    'AppName': 'MyApp',
    'AppStatus': 'Active',
    'EntitlementOwnerUID': 'UID001',
    'EntitlementOwnerName': 'John Doe',
    'EntitlementOwnerMetier': 'IT',
    'EntitlementOwnerSite': 'Paris',
    'NbSafeUsers': 5,
    'NbSafeUsersWithOwnerRight': 2,
    'NbSafeUsersWithBreakglassRight': 1,
    'NbSafeUsersWithDEVRight': 1,
    'NbSafeUsersWithConsultRight': 1,
    'SafeCreationDate': pd.Timestamp.now(),
    'LastUsed HumanDate': pd.Timestamp.now(),
    'ImportDate': pd.Timestamp.today().date(),
    'Assignee': 'Jane',
    'Action': 'Review',
    'Remediation': 'None',
    'Comments': 'Imported from XML'
}

# Append data to main table
df = pd.read_csv(main_table_name)
df = df.append(row, ignore_index=True)
df.to_csv(main_table_name, index=False)

# Append to metadata
meta_df = pd.read_csv(meta_table_name)
meta_df = meta_df.append({'SafeId': len(df), 'SafeName': 'SafeA', 'present_on': pd.Timestamp.today().date()}, ignore_index=True)
meta_df.to_csv(meta_table_name, index=False)











































-- Assuming you have a temporary table or staging table `incoming_data`
-- which contains today's received file data.

-- STEP 1: Insert NEW records into main table
INSERT INTO PAM_Cyberarck_reportname (
    Instance, Metier2, SafeName, BAM_ID, AppName, AppStatus,
    EntitlementOwnerUID, EntitlementOwnerName, EntitlementOwnerMetier,
    EntitlementOwnerSite, NbSafeUsers, NbSafeUsersWithOwnerRight,
    NbSafeUsersWithBreakglassRight, NbSafeUsersWithDEVRight,
    NbSafeUsersWithConsultRight, SafeCreationDate, `LastUsed HumanDate`,
    ImportDate, Assignee, Action, Remediation, Comments
)
SELECT 
    i.Instance, i.Metier2, i.SafeName, i.BAM_ID, i.AppName, i.AppStatus,
    i.EntitlementOwnerUID, i.EntitlementOwnerName, i.EntitlementOwnerMetier,
    i.EntitlementOwnerSite, i.NbSafeUsers, i.NbSafeUsersWithOwnerRight,
    i.NbSafeUsersWithBreakglassRight, i.NbSafeUsersWithDEVRight,
    i.NbSafeUsersWithConsultRight, i.SafeCreationDate, i.`LastUsed HumanDate`,
    CURRENT_DATE, i.Assignee, i.Action, i.Remediation, i.Comments
FROM incoming_data i
LEFT JOIN PAM_Cyberarck_reportname p
  ON i.SafeName = p.SafeName
WHERE p.SafeName IS NULL;

-- STEP 2: Update existing records' ImportDate
UPDATE PAM_Cyberarck_reportname p
JOIN incoming_data i ON p.SafeName = i.SafeName
SET 
    p.Instance = i.Instance,
    p.Metier2 = i.Metier2,
    p.BAM_ID = i.BAM_ID,
    p.AppName = i.AppName,
    p.AppStatus = i.AppStatus,
    p.EntitlementOwnerUID = i.EntitlementOwnerUID,
    p.EntitlementOwnerName = i.EntitlementOwnerName,
    p.EntitlementOwnerMetier = i.EntitlementOwnerMetier,
    p.EntitlementOwnerSite = i.EntitlementOwnerSite,
    p.NbSafeUsers = i.NbSafeUsers,
    p.NbSafeUsersWithOwnerRight = i.NbSafeUsersWithOwnerRight,
    p.NbSafeUsersWithBreakglassRight = i.NbSafeUsersWithBreakglassRight,
    p.NbSafeUsersWithDEVRight = i.NbSafeUsersWithDEVRight,
    p.NbSafeUsersWithConsultRight = i.NbSafeUsersWithConsultRight,
    p.SafeCreationDate = i.SafeCreationDate,
    p.`LastUsed HumanDate` = i.`LastUsed HumanDate`,
    p.ImportDate = CURRENT_DATE,
    p.Assignee = i.Assignee,
    p.Action = i.Action,
    p.Remediation = i.Remediation,
    p.Comments = i.Comments
WHERE EXISTS (
    SELECT 1 FROM incoming_data i2
    WHERE i2.SafeName = p.SafeName
);

-- STEP 3: Insert into metadata table for each received file
INSERT INTO PAM_Cyberarck_reportname_metadata (SafeId, SafeName, present_on)
SELECT 
    p.id, p.SafeName, CURRENT_DATE
FROM PAM_Cyberarck_reportname p
JOIN incoming_data i ON i.SafeName = p.SafeName;



BEGIN

  FOR each file_record IN today's_received_files:

    SET safe_name = file_record.SafeName

    -- Check if the SafeName already exists in the main table
    IF safe_name EXISTS IN PAM_Cyberarck_reportname THEN

        -- CASE 1: File already exists ‚Üí Update its ImportDate and other fields
        UPDATE PAM_Cyberarck_reportname
        SET 
          Instance = file_record.Instance,
          Metier2 = file_record.Metier2,
          BAM_ID = file_record.BAM_ID,
          AppName = file_record.AppName,
          AppStatus = file_record.AppStatus,
          EntitlementOwnerUID = file_record.EntitlementOwnerUID,
          EntitlementOwnerName = file_record.EntitlementOwnerName,
          EntitlementOwnerMetier = file_record.EntitlementOwnerMetier,
          EntitlementOwnerSite = file_record.EntitlementOwnerSite,
          NbSafeUsers = file_record.NbSafeUsers,
          NbSafeUsersWithOwnerRight = file_record.NbSafeUsersWithOwnerRight,
          NbSafeUsersWithBreakglassRight = file_record.NbSafeUsersWithBreakglassRight,
          NbSafeUsersWithDEVRight = file_record.NbSafeUsersWithDEVRight,
          NbSafeUsersWithConsultRight = file_record.NbSafeUsersWithConsultRight,
          SafeCreationDate = file_record.SafeCreationDate,
          LastUsed_HumanDate = file_record.LastUsed_HumanDate,
          ImportDate = CURRENT_DATE,
          Assignee = file_record.Assignee,
          Action = file_record.Action,
          Remediation = file_record.Remediation,
          Comments = file_record.Comments
        WHERE SafeName = safe_name

    ELSE

        -- CASE 3: New file ‚Üí Insert into main table
        INSERT INTO PAM_Cyberarck_reportname (
          Instance, Metier2, SafeName, BAM_ID, AppName, AppStatus,
          EntitlementOwnerUID, EntitlementOwnerName, EntitlementOwnerMetier,
          EntitlementOwnerSite, NbSafeUsers, NbSafeUsersWithOwnerRight,
          NbSafeUsersWithBreakglassRight, NbSafeUsersWithDEVRight,
          NbSafeUsersWithConsultRight, SafeCreationDate, LastUsed_HumanDate,
          ImportDate, Assignee, Action, Remediation, Comments
        )
        VALUES (
          file_record.Instance, file_record.Metier2, file_record.SafeName, file_record.BAM_ID,
          file_record.AppName, file_record.AppStatus, file_record.EntitlementOwnerUID,
          file_record.EntitlementOwnerName, file_record.EntitlementOwnerMetier,
          file_record.EntitlementOwnerSite, file_record.NbSafeUsers,
          file_record.NbSafeUsersWithOwnerRight, file_record.NbSafeUsersWithBreakglassRight,
          file_record.NbSafeUsersWithDEVRight, file_record.NbSafeUsersWithConsultRight,
          file_record.SafeCreationDate, file_record.LastUsed_HumanDate,
          CURRENT_DATE, file_record.Assignee, file_record.Action,
          file_record.Remediation, file_record.Comments
        )

    END IF

    -- In both cases (new or existing file), log arrival in metadata table
    GET id FROM PAM_Cyberarck_reportname WHERE SafeName = safe_name

    INSERT INTO PAM_Cyberarck_reportname_metadata (
      SafeId, SafeName, present_on
    ) VALUES (
      id, safe_name, CURRENT_DATE
    )

  END FOR

END
