CREATE TABLE SafeData (
    id INT AUTO_INCREMENT PRIMARY KEY,
    Metier2 VARCHAR(255),
    SafeName VARCHAR(255),
    BAM_ID INT,
    AppName VARCHAR(255),
    Instance VARCHAR(255),
    AppStatus VARCHAR(255),
    EntitlementOwnerUID VARCHAR(255),
    EntitlementOwnerName VARCHAR(255),
    EntitlementOwnerMetier VARCHAR(255),
    EntitlementOwnerSite VARCHAR(255),
    NB_Accounts INT,
    SafeCreationDate DATETIME,
    LastUsedHumanDate DATETIME,
    ImportDate DATETIME,
    Assignee VARCHAR(255),
    Action VARCHAR(255),
    Remediation VARCHAR(255),
    Comments VARCHAR(255),
    NbSafeUsers INT,
    NbSafeUsersWithOwnerRight INT,
    NbSafeUsersWithBreakglassRight INT,
    NbSafeUsersWithDEVRight INT,
    NbSafeUsersWithConsultRight INT,
    UNIQUE KEY (id, SafeName)
);

CREATE TABLE metadata (
    id INT,
    Metier2 VARCHAR(255),
    SafeName VARCHAR(255),
    BAM_ID INT,
    AppName VARCHAR(255),
    Instance VARCHAR(255),
    AppStatus VARCHAR(255),
    EntitlementOwnerUID VARCHAR(255),
    EntitlementOwnerName VARCHAR(255),
    EntitlementOwnerMetier VARCHAR(255),
    EntitlementOwnerSite VARCHAR(255),
    NB_Accounts INT,
    SafeCreationDate DATETIME,
    LastUsedHumanDate DATETIME,
    ImportDate DATETIME,
    Assignee VARCHAR(255),
    Action VARCHAR(255),
    Remediation VARCHAR(255),
    Comments VARCHAR(255),
    NbSafeUsers INT,
    NbSafeUsersWithOwnerRight INT,
    NbSafeUsersWithBreakglassRight INT,
    NbSafeUsersWithDEVRight INT,
    NbSafeUsersWithConsultRight INT,
    latest_import_date DATETIME,
    PRIMARY KEY (SafeName)  -- assumes SafeName is unique
);


CREATE TABLE history (
    sno INT AUTO_INCREMENT PRIMARY KEY,
    report_id INT,
    present_on DATE,
    FOREIGN KEY (report_id) REFERENCES SafeData(id)
);

-- Assume the new row inserted into SafeData has id = ? (e.g., 3)
-- We'll use a variable to simulate the last inserted id
SET @new_id := LAST_INSERT_ID();

-- Get the SafeName and ImportDate of the new record
SELECT SafeName, ImportDate
INTO @safe_name, @import_date
FROM SafeData
WHERE id = @new_id;

-- Check if this SafeName exists in metadata
SELECT COUNT(*) INTO @exists
FROM metadata
WHERE SafeName = @safe_name;

-- Case A: Insert if it doesn't exist
INSERT INTO metadata (
    id, Metier2, SafeName, BAM_ID, AppName, Instance, AppStatus,
    EntitlementOwnerUID, EntitlementOwnerName, EntitlementOwnerMetier,
    EntitlementOwnerSite, NB_Accounts, SafeCreationDate,
    LastUsedHumanDate, ImportDate, Assignee, Action,
    Remediation, Comments, NbSafeUsers, NbSafeUsersWithOwnerRight,
    NbSafeUsersWithBreakglassRight, NbSafeUsersWithDEVRight,
    NbSafeUsersWithConsultRight, latest_import_date
)
SELECT id, Metier2, SafeName, BAM_ID, AppName, Instance, AppStatus,
       EntitlementOwnerUID, EntitlementOwnerName, EntitlementOwnerMetier,
       EntitlementOwnerSite, NB_Accounts, SafeCreationDate,
       LastUsedHumanDate, ImportDate, Assignee, Action,
       Remediation, Comments, NbSafeUsers, NbSafeUsersWithOwnerRight,
       NbSafeUsersWithBreakglassRight, NbSafeUsersWithDEVRight,
       NbSafeUsersWithConsultRight, ImportDate
FROM SafeData
WHERE id = @new_id
AND NOT EXISTS (
    SELECT 1 FROM metadata WHERE SafeName = @safe_name
);

-- Case B: Update if SafeName exists and the ImportDate is newer
UPDATE metadata m
JOIN SafeData s ON m.SafeName = s.SafeName AND s.id = @new_id
SET
    m.id = s.id,
    m.Metier2 = s.Metier2,
    m.BAM_ID = s.BAM_ID,
    m.AppName = s.AppName,
    m.Instance = s.Instance,
    m.AppStatus = s.AppStatus,
    m.EntitlementOwnerUID = s.EntitlementOwnerUID,
    m.EntitlementOwnerName = s.EntitlementOwnerName,
    m.EntitlementOwnerMetier = s.EntitlementOwnerMetier,
    m.EntitlementOwnerSite = s.EntitlementOwnerSite,
    m.NB_Accounts = s.NB_Accounts,
    m.SafeCreationDate = s.SafeCreationDate,
    m.LastUsedHumanDate = s.LastUsedHumanDate,
    m.ImportDate = s.ImportDate,
    m.Assignee = s.Assignee,
    m.Action = s.Action,
    m.Remediation = s.Remediation,
    m.Comments = s.Comments,
    m.NbSafeUsers = s.NbSafeUsers,
    m.NbSafeUsersWithOwnerRight = s.NbSafeUsersWithOwnerRight,
    m.NbSafeUsersWithBreakglassRight = s.NbSafeUsersWithBreakglassRight,
    m.NbSafeUsersWithDEVRight = s.NbSafeUsersWithDEVRight,
    m.NbSafeUsersWithConsultRight = s.NbSafeUsersWithConsultRight,
    m.latest_import_date = s.ImportDate
WHERE m.SafeName = @safe_name AND s.ImportDate > m.latest_import_date;
